*************************************
Как пользоваться парсером xmlPyParser
*************************************

Мы постарались сделать использование парсера максимально простым и не требующим каких-либо глубоких и специальных знаний. Но некоторые вещи Вам все-таки знать нужно:

**Нужно знать**
    1. Структура данных **любого** xml источника представляет собой дерево, которое можно отобразить, например, так __
    2. **Все** страницы любого сайта, которые Вы видите в своем браузере являются xml источником данных, а точнее его подвида - html. А значит все что отображено на странице сайта - сохранено в древовидной структуре. 
    3. Чтобы указать парсеру какие данные Вам нужно извлечь, необходимо _указать путь к этим данным, начиная от корня дерева
    
**Пример 1**

Приведем простой пример. Нам необходимо узнать путь, по которому сохранены заголовки объявлений, отражающихся на страницах сайта Avito.ru

Для этого открываем страницу сайта с объявлениями (регион не важен), берем первое попавшееся объявление и запоминаем что написано в его заголовке, например, ___

Теперь просто запускаем xmlPyParser передав ему два параметра 1) адрес страницы сайта Avito.ru, на котором расположены объявления, 2) текст заголовка объявления

.. code-block:: bash

    xmlPyParser -getPath url=http://---- text='dddd'  

Программа вернет примерно такой результат 

.. code-block:: bash

    html/body/div/div/div/div/div/div/div/div/a

Это и будет путь, по которым сохранены заголовки объявлений на сайте Avito.ru

Теперь, чтобы получить заголовки всех объявлений, размещенных на странице, достаточно ввести команду

.. code-block:: bash
    
    xmlPyParser -getData path="html/body/div/div/div/div/div/div/div/div/a" 
    
**Нужно знать**
    4. источники, хранящие данные в "строгом" xml (не html) - ленты новостей, результаты API запросов, файлы с архивными данными и т.д. имеют (в отличии от html) структуру не сильно разветвленного дерева. А значит, графическое представление структуры наглядно отобразит путь до любого элемента данных источника

**Пример 2**

Необходимо отобразить структуру ленты новостей сайта Lenta.ru. Для этого просто введем команду


.. code-block:: bash

    xmlPyParser -getTree url=_____
В результате парсер сгенерирует графический файл наглядно отражающий структуру xml источника
     