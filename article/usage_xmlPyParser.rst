*************************************
Как пользоваться парсером xmlPyParser
*************************************

Мы постарались сделать использование парсера максимально простым и не требующим каких-либо глубоких и специальных знаний. Но некоторые вещи Вам все-таки знать необходимо:

**Нужно знать**
    1. Любой источник данных xml имеет древовидную стру
    2. **Все** страницы любого сайта, которые Вы видите в своем браузере являются xml источником данных, а точнее его подвида - html. А значит все что отображено на странице сайта - сохранено в древовидной структуре. 
    3. Чтобы указать парсеру какие данные Вам нужно извлечь, необходимо задать путь к этим данным, начиная от корня дерева

xmlPyParser предоставляет два способа определения пути к нужным данным: графический и консольный.

Графический способ наглядно отражает структуру всего дерева источника xml и позволяет быстро определить путь к любым данным источника

:Пример_1:
	Необходимо отобразить структуру данных новостной ленты сайта Lenta.ru. Для этого просто введем команду

.. code-block:: bash

    xmlPyParser -getTree url='https://lenta.ru/rss'

В результате парсер сгенерирует графический файл (png) наглядно отражающий структуру xml источника

.. image:: images/lenta_tree.png

Из рисунка легко понять, что в заданном источнике xml по пути 
*rss/channel/description*  сохранены данные ___,
по пути *rss/channel/item/description* сохранены
а перейдя по пути *rss/channel/item/pubDate* мы узнаем дату и время появления новости

Графический способ анализа структуры источника xml не удобен для сильно разветвленных источников. К таковым прежде всего относятся страницы сайтов, сохраняющие данные в формате html. Например, вот так выглядит структура страницы сайта https://www.avito.ru, содержащая объявления купли-продажи

____

Разобраться из рисунка, по какому пути находятся нужные дам данные (например, заголовок объявления) практически невозможно.

Поэтому, при определении пути к данным в сильно разветвленной структуре источника xml лучше воспользоваться консольным способом. Поясним его работу на примере

:Пример_2: 
	Необходимо узнать путь, по которому сохранены заголовки объявлений, отражающихся на страницах сайта Avito.ru

Для этого открываем страницу сайта с объявлениями (регион не важен), берем первое попавшееся объявление и запоминаем что написано в его заголовке, например, *"Багажник на крышу"*

Теперь запускаем xmlPyParser передав ему два параметра 1) адрес страницы сайта Avito.ru, на котором расположены объявления, 2) текст заголовка объявления

.. code-block:: bash

    xmlPyParser -getPath url='https://www.avito.ru/rostov-na-donu' text='Багажник на крышу'  

Программа вернет примерно такой результат 

.. code-block:: bash

    html/body/div/div/div/div/div/div/div/div/a

Это и будет путь, по которым сохранены заголовки объявлений на сайте Avito.ru




Теперь, чтобы получить заголовки всех объявлений, размещенных на странице, достаточно ввести команду

.. code-block:: bash
    
    xmlPyParser -getData path="html/body/div/div/div/div/div/div/div/div/a" 
    
**Нужно знать**
    4. источники, хранящие данные в "строгом" xml (не html) - ленты новостей, результаты API запросов, файлы с архивными данными и т.д. имеют (в отличии от html) структуру не сильно разветвленного дерева. А значит, графическое представление структуры наглядно отобразит путь до любого элемента данных источника



     